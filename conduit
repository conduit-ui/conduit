#!/usr/bin/env php
<?php

define('LARAVEL_START', microtime(true));

/*
|--------------------------------------------------------------------------
| Register The Auto Loader
|--------------------------------------------------------------------------
|
| Composer provides a convenient, automatically generated class loader
| for our application. We just need to utilize it! We'll require it
| into the script here so that we do not have to worry about the
| loading of any our classes "manually". Feels great to relax.
|
*/

// Detect if we're running as a global composer package or local installation
$isGlobalPackage = false;
$autoloaderPath = __DIR__.'/vendor/autoload.php';
$bootstrapPath = __DIR__.'/bootstrap/app.php';

// Check for global installation patterns
if (!file_exists($autoloaderPath)) {
    // Try common global installation paths
    $globalPaths = [
        __DIR__.'/../../autoload.php',           // Standard global composer location
        __DIR__.'/../autoload.php',              // Alternative global location  
        __DIR__.'/../../../autoload.php',        // Deep global location
    ];
    
    foreach ($globalPaths as $path) {
        if (file_exists($path)) {
            $autoloaderPath = $path;
            $isGlobalPackage = true;
            break;
        }
    }
}

// Load the autoloader first
$autoloader = require $autoloaderPath;

// For global packages, we need to set up paths differently
if ($isGlobalPackage) {
    // Global installation - use custom bootstrap
    $app = require_once __DIR__.'/bootstrap/global.php';
} else {
    // Local installation - use standard bootstrap
    $app = require_once $bootstrapPath;
}

// Ensure we have a valid Laravel application
if (!$app || !method_exists($app, 'make')) {
    echo "Error: Failed to initialize Laravel Zero application.\n";
    echo "Package root: " . __DIR__ . "\n";
    echo "Is global: " . ($isGlobalPackage ? 'yes' : 'no') . "\n";
    echo "Bootstrap path: " . ($isGlobalPackage ? __DIR__.'/bootstrap/global.php' : $bootstrapPath) . "\n";
    exit(1);
}

/*
|--------------------------------------------------------------------------
| Run The Artisan Application
|--------------------------------------------------------------------------
|
| When we run the console application, the current CLI command will be
| executed in this console and the response sent back to a terminal
| or another output device for the developers. Here goes nothing!
|
*/

$kernel = $app->make(Illuminate\Contracts\Console\Kernel::class);

$status = $kernel->handle(
    $input = new Symfony\Component\Console\Input\ArgvInput,
    new Symfony\Component\Console\Output\ConsoleOutput
);

/*
|--------------------------------------------------------------------------
| Shutdown The Application
|--------------------------------------------------------------------------
|
| Once Artisan has finished running, we will fire off the shutdown events
| so that any final work may be done by the application before we shut
| down the process. This is the last thing to happen to the request.
|
*/

$kernel->terminate($input, $status);

exit($status);
